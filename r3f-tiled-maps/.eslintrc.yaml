root: true

parser: "@typescript-eslint/parser"
parserOptions:
  sourceType: module

plugins:
  - "@typescript-eslint"

extends:
  - problems
  - "plugin:@typescript-eslint/eslint-recommended"
  - "plugin:@typescript-eslint/recommended"
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:prettier/recommended
  - plugin:react/recommended
  - plugin:react-hooks/recommended

env:
  jest: true
  browser: true

settings:
  react:
    version: detect
  import/resolver:
    node:
      extensions:
        - .ts
        - .tsx

rules:
  no-fallthrough: off
  no-undef-init: off
  prefer-rest-params: off
  eqeqeq: [2, "smart"]
  "@typescript-eslint/explicit-function-return-type": off
  "@typescript-eslint/explicit-module-boundary-types": off
  "@typescript-eslint/no-explicit-any": off
  "@typescript-eslint/no-var-requires": off
  "@typescript-eslint/no-namespace": off
  "@typescript-eslint/ban-ts-ignore": off
  "@typescript-eslint/ban-ts-comment": off
  "@typescript-eslint/ban-types": off
  "@typescript-eslint/interface-name-prefix": off
  "@typescript-eslint/no-empty-interface": off
  "@typescript-eslint/no-empty-function": off
  "@typescript-eslint/no-use-before-define": [2, {"functions": false}]
  "@typescript-eslint/no-unused-vars": [2, {vars: "all", args: "after-used", argsIgnorePattern: "^_"}]
  "@typescript-eslint/consistent-type-assertions": [2, {assertionStyle: "as", objectLiteralTypeAssertions: "allow-as-parameter"}]
  import/order: [2, {newlines-between: "always-and-inside-groups", alphabetize: {order: "asc"}, groups: ["builtin", "external", "internal", "parent", "sibling", "index", "unknown"]}]
  react/prop-types: off
  react/react-in-jsx-scope: off
